DELIMITER //
CREATE PROCEDURE partition_verify (DEST_SCHEMA_NAME VARCHAR(32)) BEGIN DECLARE stop_flag INT DEFAULT 0; DECLARE p_table VARCHAR(32); DECLARE p_current_date VARCHAR(32); DECLARE p_current_timestamp BIGINT; DECLARE p_current_part VARCHAR(32); DECLARE p_tables CURSOR FOR
SELECT
	TABLE_NAME
FROM
	INFORMATION_SCHEMA.TABLES
WHERE
	TABLE_SCHEMA = DEST_SCHEMA_NAME
	AND (TABLE_NAME LIKE 'history%'
	OR TABLE_NAME LIKE 'trends%'); DECLARE CONTINUE HANDLER FOR NOT FOUND SET
	stop_flag = 1;
SELECT
	DATE_FORMAT(CURRENT_DATE(), "%Y%m%d")
INTO
	p_current_date;
SELECT
	UNIX_TIMESTAMP(DATE_FORMAT(DATE_ADD(CURRENT_DATE(), INTERVAL 1 DAY), "%Y%m%d"))
INTO
	p_current_timestamp;
SELECT
	CONCAT("p", p_current_date)
INTO
	p_current_part; OPEN p_tables; FETCH p_tables
INTO
	p_table; WHILE(stop_flag = 0) DO BEGIN DECLARE p_exist INT;
SELECT
	COUNT(1)
INTO
	p_exist
FROM
	INFORMATION_SCHEMA.PARTITIONS
WHERE
	TABLE_SCHEMA = DEST_SCHEMA_NAME
	AND TABLE_NAME = p_table
	AND PARTITION_NAME IS NULL; IF p_exist = 1 THEN SET
	@sql_verify = CONCAT("ALTER TABLE ", DEST_SCHEMA_NAME, ".", p_table, " PARTITION BY RANGE(`CLOCK`) (PARTITION ", p_current_part, " VALUES LESS THAN (", p_current_timestamp, "));"); PREPARE STMT
FROM
	@sql_verify; EXECUTE STMT; DEALLOCATE PREPARE STMT; END IF; FETCH p_tables
INTO
	p_table; END; END WHILE; CLOSE p_tables; END //
DELIMITER ;
DELIMITER //
CREATE PROCEDURE partition_add (DEST_SCHEMA_NAME VARCHAR(32)) BEGIN DECLARE stop_flag INT DEFAULT 0; DECLARE p_table VARCHAR(32); DECLARE p_next_date VARCHAR(32); DECLARE p_next_timestamp BIGINT; DECLARE p_next_part VARCHAR(32); DECLARE p_tables CURSOR FOR
SELECT
	TABLE_NAME
FROM
	INFORMATION_SCHEMA.TABLES
WHERE
	TABLE_SCHEMA = DEST_SCHEMA_NAME
	AND (TABLE_NAME LIKE 'history%'
	OR TABLE_NAME LIKE 'trends%'); DECLARE CONTINUE HANDLER FOR NOT FOUND SET
	stop_flag = 1;
SELECT
	DATE_FORMAT(DATE_ADD(CURRENT_DATE(), INTERVAL 1 DAY), "%Y%m%d")
INTO
	p_next_date;
SELECT
	UNIX_TIMESTAMP(DATE_FORMAT(DATE_ADD(CURRENT_DATE(), INTERVAL 2 DAY), "%Y%m%d"))
INTO
	p_next_timestamp;
SELECT
	CONCAT("p", p_next_date)
INTO
	p_next_part; OPEN p_tables; FETCH p_tables
INTO
	p_table; WHILE(stop_flag = 0) DO BEGIN DECLARE p_exist INT;
SELECT
	COUNT(1)
INTO
	p_exist
FROM
	INFORMATION_SCHEMA.PARTITIONS
WHERE
	TABLE_SCHEMA = DEST_SCHEMA_NAME
	AND TABLE_NAME = p_table
	AND PARTITION_DESCRIPTION >= p_next_timestamp; IF p_exist = 0 THEN
SELECT
	CONCAT("PARTITION_CREATE(", DEST_SCHEMA_NAME, ",", p_table, ",", p_next_date, ",", p_next_timestamp, ")") AS ADD_PARTITION; SET
	@sql_add = CONCAT('ALTER TABLE ', DEST_SCHEMA_NAME, ".", p_table, ' ADD PARTITION (PARTITION ', p_next_part, ' VALUES LESS THAN (', p_next_timestamp, '));'); PREPARE STMT
FROM
	@sql_add; EXECUTE STMT; DEALLOCATE PREPARE STMT; END IF; FETCH p_tables
INTO
	p_table; END; END WHILE; CLOSE p_tables; END //
DELIMITER ;
DELIMITER //
CREATE PROCEDURE partition_drop (DEST_SCHEMA_NAME VARCHAR(32),
DEST_TABLE_NAME VARCHAR(32),
KEEP_DAY INT) BEGIN DECLARE stop_flag INT DEFAULT 0; DECLARE p_partition VARCHAR(32); DECLARE p_partitions CURSOR FOR
SELECT
	PARTITION_NAME
FROM
	INFORMATION_SCHEMA.PARTITIONS
WHERE
	TABLE_SCHEMA = DEST_SCHEMA_NAME
	AND TABLE_NAME = DEST_TABLE_NAME
	AND PARTITION_DESCRIPTION <= UNIX_TIMESTAMP(DATE_FORMAT(DATE_ADD(CURRENT_DATE(), INTERVAL - KEEP_DAY DAY), "%Y%m%d")); DECLARE CONTINUE HANDLER FOR NOT FOUND SET
	stop_flag = 1; OPEN p_partitions; FETCH p_partitions
INTO
	p_partition; WHILE(stop_flag = 0) DO
SELECT
	CONCAT("PARTITION_DROP(", DEST_TABLE_NAME, ",", p_partition, ")") AS DROP_PARTITION; SET
	@sql_drop = CONCAT("ALTER TABLE ", DEST_SCHEMA_NAME, ".", DEST_TABLE_NAME, " DROP PARTITION ", p_partition, ";"); PREPARE STMT
FROM
	@sql_drop; EXECUTE STMT; DEALLOCATE PREPARE STMT; FETCH p_partitions
INTO
	p_partition; END WHILE; CLOSE p_partitions ; END //
DELIMITER ;
DELIMITER //
CREATE PROCEDURE partition_maintain (DEST_SCHEMA_NAME VARCHAR(32),
HISTORY_KEEP_DAY INT,
TRENDS_KEEP_DAY INT) BEGIN DECLARE stop_flag INT DEFAULT 0; DECLARE p_table VARCHAR(32); DECLARE p_tables CURSOR FOR
SELECT
	TABLE_NAME
FROM
	INFORMATION_SCHEMA.TABLES
WHERE
	TABLE_SCHEMA = DEST_SCHEMA_NAME
	AND (TABLE_NAME LIKE 'history%'
	OR TABLE_NAME LIKE 'trends%'); DECLARE CONTINUE HANDLER FOR NOT FOUND SET
	stop_flag = 1; OPEN p_tables; FETCH p_tables
INTO
	p_table; WHILE(stop_flag = 0) DO IF LOCATE('history', p_table) THEN CALL partition_drop(DEST_SCHEMA_NAME,
	p_table,
	HISTORY_KEEP_DAY); ELSEIF LOCATE('trends', p_table) THEN CALL PARTITION_DROP(DEST_SCHEMA_NAME,
	p_table,
	TRENDS_KEEP_DAY); END IF; FETCH p_tables
INTO
	p_table; END WHILE; CLOSE p_tables; CALL PARTITION_VERIFY(DEST_SCHEMA_NAME); CALL PARTITION_ADD(DEST_SCHEMA_NAME); END //
DELIMITER ;
